---
description: 
globs: 
alwaysApply: false
---
# XCF User Guide

## Overview
XCF is a command-line tool for managing, building, and running Xcode projects through automation. It provides a streamlined interface for common Xcode operations without needing to open the Xcode UI.

## Installation
*Note: Installation details will depend on your specific setup.*

## Getting Started

### Activating XCF
```
xcf use xcf
```
This command activates XCF mode and prepares the system for Xcode automation. A successful activation will display "All xcf systems go!"

### Granting Permissions
```
xcf grant
```
This command requests and grants permission to use Xcode automation features. This is a required step for XCF to interact with Xcode.

## Project Management

### Listing Available Projects
```
xcf show
```
This command displays a numbered list of all open Xcode projects and workspaces.

Example output:
```
1. /Users/toddbruss/Documents/GitHub/xcf/xcf.xcodeproj
```

### Opening Projects
```
xcf open #
```
Replace `#` with the number of the project from the `show` command to open that specific project or workspace.

### Viewing Current Project
```
xcf current
```
Displays the path to the currently selected Xcode project.

Example output:
```
Current project: /Users/toddbruss/Documents/GitHub/xcf/xcf.xcodeproj
```

## Build and Run Operations

### Building the Project
```
xcf build
```
Builds the current Xcode project. A successful build will display "üê¶üìú Built successfully".

### Running the Project
```
xcf run
```
Executes the current Xcode project after building. A successful run will display "üê¶üìú Ran successfully".

## Code Analysis and Access

### Accessing Code Snippets
To access file contents using XCF, use the MCP snippet function:

```
mcp_xcf_snippet filePath="path/to/file.swift" entireFile=true
```

This displays the entire content of the specified file. You can also specify a line range:

```
mcp_xcf_snippet filePath="path/to/file.swift" startLine=10 endLine=20
```

This displays lines 10 through 20 of the file.

XCF uses smart path resolution to find files even when the exact path isn't provided. You can often use just the filename:

```
mcp_xcf_snippet filePath="AppDelegate.swift" entireFile=true
```

### Analyzing Swift Code
To analyze Swift code for potential issues, use:

```
mcp_xcf_analyzer filePath="path/to/file.swift" entireFile=true
```

Performs a comprehensive analysis of Swift code, checking for issues like:
- Syntax and style issues
- Unused variables
- Functions with high complexity
- Magic numbers
- Refactoring opportunities
- Long methods
- And more

For convenience, there's also a shorthand command:
```
mcp_xcf_xcf action="lz path/to/file.swift"
```

You can analyze specific line ranges:
```
mcp_xcf_analyzer filePath="path/to/file.swift" startLine=50 endLine=100
```

The analysis output is formatted in Markdown and includes a summary of issues by category.

## System Information

### Environment Variables
```
xcf env
```
Shows all environment variables currently available to the XCF process. This is useful for debugging and understanding the execution context.

### Current Working Directory
```
xcf pwd
```
Displays the current working directory path. This command also has two aliases: `dir` and `path`.

Example output:
```
Current folder: /Users/toddbruss/Documents/GitHub/xcf
```

## Help and Documentation

### Getting Help
```
xcf help
```
Displays a list of all available XCF actions and their brief descriptions.

## Workflow Examples

### Typical Development Workflow

1. Activate XCF: `mcp_xcf_xcf action="use xcf"`
2. Grant permissions: `mcp_xcf_xcf action="grant"`
3. List projects: `mcp_xcf_xcf action="show"`
4. Select project (if needed): `mcp_xcf_xcf action="open 1"`
5. Build the project: `mcp_xcf_xcf action="build"`
6. Run the project: `mcp_xcf_xcf action="run"`

### Code Analysis Workflow

1. Activate XCF: `mcp_xcf_xcf action="use xcf"`
2. View current project: `mcp_xcf_xcf action="current"`
3. Examine code: `mcp_xcf_snippet filePath="MyClass.swift" entireFile=true`
4. Analyze code: `mcp_xcf_analyzer filePath="MyClass.swift" entireFile=true`
5. Fix issues and build: `mcp_xcf_xcf action="build"`

### Automation Tips

XCF can be integrated into scripts and automation workflows to streamline Xcode project management, continuous integration, and testing procedures.

## Troubleshooting

If you encounter issues with XCF:

1. Ensure Xcode is properly installed
2. Verify permissions are granted with `xcf grant`
3. Check your environment variables with `xcf env`
4. Confirm the correct project is selected with `xcf current`
5. Check your current directory with `xcf pwd`

## Conclusion

XCF provides a powerful command-line interface to Xcode operations, enabling faster development workflows and better integration with other tools and scripts.
