---
description: 
globs: 
alwaysApply: false
---
# XCF - AI Assistant Integration Guide

## Overview

xcf is an MCP server that enables AI assistants to control Xcode projects directly, providing automation for builds, runs, and project management. This integration works with Cursor, VSCode, and Claude Desktop.

## Setup

Add xcf to your MCP configuration file:

```json
{
  "mcpServers": {
    "xcf": {
      "type": "stdio",
      "command": "/Applications/xcf.app/Contents/MacOS/xcf server"
    }
  }
}
```

### Configuration Locations
- **Cursor**: `~/.cursor/mcp.json`
- **Claude Desktop**: `~/Library/Application Support/Claude/claude_desktop_config.json`

Remember to restart your AI assistant after setup.

## Advanced Configuration

For non-Cursor clients or users requiring project-level control, add these environment variables:

```json
{
  "mcpServers": {
    "xcf": {
      "type": "stdio",
      "command": "/Applications/xcf.app/Contents/MacOS/xcf server",
      "env": {
          "XCODE_PROJECT_FOLDER": "/path/to/project/",
          "XCODE_PROJECT": "/path/to/project/project.xcodeproj"
      }
    }
  }
}
```

## Commands

| Command | Description |
|---------|-------------|
| `use xcf` | Activate xcf mode |
| `grant` | Permission to use Xcode automation |
| `show` | List open Xcode projects |
| `open #` | Select project by number |
| `run` | Run current project |
| `build` | Build current project |
| `current` | Show selected project |
| `env` | Show environment variables |
| `help` | Display all available commands |

## MCP Tools

### Function-Based Tools
- `mcp_xcf_xcf`: Execute xcf actions/commands
- `mcp_xcf_list`: Show all available tools
- `mcp_xcf_snippet`: Access file contents
- `mcp_xcf_help`: Get help information

### Snippet Tool Usage

#### For AI Function Calls

To get an entire file:
```
mcp_xcf_snippet(filePath="/full/path/to/file.swift", entireFile=true)
```

For specific line ranges:
```
mcp_xcf_snippet(filePath="/full/path/to/file.swift", startLine=10, endLine=20)
```

#### For Human Commands

To get an entire file:
```
snippet /full/path/to/file.swift
```

For specific line ranges:
```
snippet /full/path/to/file.swift 10 20
```

#### Smart Path Resolution

When using the snippet tool, xcf intelligently tries to locate your file if the exact path isn't found:

1. First tries the exact path provided
2. Looks for the file in the current working directory
3. Searches in the workspace folder defined by WORKSPACE_FOLDER_PATHS
4. Checks subdirectories one level deep in the workspace folder
5. Looks in the current project directory

This makes it easier to work with files without specifying full paths. When possible, you can use just the filename:

```
mcp_xcf_snippet(filePath="Constants.swift", entireFile=true)
```

## Security Features

- Safely works with projects in your designated workspace
- Automatically prevents access outside your workspace boundaries
- Redirects to safe alternatives when needed
- Uses environment variables to define secure boundaries

## Workflow Examples

### Basic Workflow
1. `use xcf` - Activate the tool
2. `grant` - Grant necessary permissions
3. `show` - See available projects
4. `open #` - Select a project 
5. `build` - Build the project
6. `run` - Run the project

### Code Exploration
1. `use xcf` - Activate the tool
2. `current` - Check current project
3. Use snippet tool to examine code
4. `build` - Test changes

## Troubleshooting

If commands fail, check:
- xcf installation is correct
- Configuration settings are valid
- Permissions are properly set
- Environment variables with `env`
- Try restarting your AI assistant

For persistent issues, examine terminal output for error messages.
