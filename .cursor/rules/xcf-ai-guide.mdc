---
description: xcf Xcode MCP Server - AI Guide
globs: 
alwaysApply: false
---
# XCF - AI Assistant Integration Guide

## Overview

xcf is an MCP server that enables AI assistants to control Xcode projects directly, providing automation for builds, runs, and project management. This integration works with Cursor, VSCode, and Claude Desktop.

## Setup

Add xcf to your MCP configuration file:

```json
{
  "mcpServers": {
    "xcf": {
      "type": "stdio",
      "command": "/Applications/xcf.app/Contents/MacOS/xcf server"
    }
  }
}
```

### Configuration Locations
- **Cursor**: `~/.cursor/mcp.json`
- **Claude Desktop**: `~/Library/Application Support/Claude/claude_desktop_config.json`

Remember to restart your AI assistant after setup.

## Advanced Configuration

For non-Cursor clients or users requiring project-level control, add these environment variables:

```json
{
  "mcpServers": {
    "xcf": {
      "type": "stdio",
      "command": "/Applications/xcf.app/Contents/MacOS/xcf server",
      "env": {
          "XCODE_PROJECT_FOLDER": "/path/to/project/",
          "XCODE_PROJECT": "/path/to/project/project.xcodeproj"
      }
    }
  }
}
```

## Commands

| Command | Description |
|---------|-------------|
| `use xcf` | Activate xcf mode |
| `grant` | Permission to use Xcode automation |
| `show` | List open Xcode projects |
| `open #` | Select project by number |
| `run` | Run current project |
| `build` | Build current project |
| `current` | Show selected project |
| `analyze` | Analyze Swift code for issues |
| `lz` | Short alias for the analyze command |
| `env` | Show environment variables |
| `pwd` | Show current working folder (aliases: dir, path) |
| `help` | Display all available commands |

## MCP Tools

### Function-Based Tools
- `mcp_xcf_xcf`: Execute xcf actions/commands
- `mcp_xcf_list`: Show all available tools
- `mcp_xcf_snippet`: Access file contents
- `mcp_xcf_analyzer`: Analyze Swift code for potential issues
- `mcp_xcf_help`: Get help information

### Snippet Tool Usage

#### For AI Function Calls

Both direct paths and named parameters are supported:

```
// Direct path format
mcp_xcf_snippet "/full/path/to/file.swift"
mcp_xcf_analyzer "/full/path/to/file.swift"
mcp_xcf_xcf action="lz /full/path/to/file.swift"

// Named parameter format (traditional)
mcp_xcf_snippet filePath="/full/path/to/file.swift" entireFile=true
mcp_xcf_analyzer filePath="/full/path/to/file.swift" entireFile=true
mcp_xcf_xcf action="lz filePath=/full/path/to/file.swift"
```

For specific line ranges:
```
// Direct path format
mcp_xcf_snippet "/full/path/to/file.swift" 10 20
mcp_xcf_analyzer "/full/path/to/file.swift" 10 20

// Named parameter format
mcp_xcf_snippet filePath="/full/path/to/file.swift" startLine=10 endLine=20
mcp_xcf_analyzer filePath="/full/path/to/file.swift" startLine=10 endLine=20
```

#### For Human Commands

When using the `xcf` tool in command line mode, use the MCP function directly:

```
mcp_xcf_snippet filePath="/Users/toddbruss/Documents/GitHub/xcf/xcf/main.swift" entireFile=true
```

For specific line ranges:
```
mcp_xcf_snippet filePath="/Users/toddbruss/Documents/GitHub/xcf/xcf/main.swift" startLine=10 endLine=20
```

#### Smart Path Resolution

When using any file operation in xcf (snippets, analysis, file operations, etc.), the tool intelligently tries to locate your file if the exact path isn't found:

1. First tries the exact path provided
2. Resolves relative paths using the current working directory
3. Searches in the current project directory and one level up
4. Searches in the workspace folder defined by WORKSPACE_FOLDER_PATHS
5. Searches recursively in workspace folders with limited depth
6. As a last resort, performs a fuzzy search for similar filenames

This smart path resolution is used consistently across ALL operations:
- File reading/writing (`readFile`, `writeFile`, etc.)
- Code snippets (`snippet`)
- Code analysis (`analyze`, `lz`)
- Directory operations (`cd`, `mkdir`, etc.)
- File editing and deletion
- Document operations in Xcode

This makes it easier to work with files without specifying full paths. When possible, you can use just the filename:

```
mcp_xcf_snippet filePath="Constants.swift" entireFile=true
mcp_xcf_analyzer filePath="Constants.swift" entireFile=true
mcp_xcf_xcf action="edit Constants.swift"
```

### Swift Code Analyzer

#### For AI Function Calls

To analyze an entire file:
```
mcp_xcf_analyzer(filePath="/full/path/to/file.swift", entireFile=true)
```

To analyze a specific line range:
```
mcp_xcf_analyzer(filePath="/full/path/to/file.swift", startLine=10, endLine=50)
```

#### For Human Commands

When using the command line mode, use:

```
mcp_xcf_analyzer filePath="/Users/toddbruss/Documents/GitHub/xcf/xcf/main.swift" entireFile=true
```

For the shorthand version:
```
mcp_xcf_xcf action="lz /Users/toddbruss/Documents/GitHub/xcf/xcf/main.swift"
```

To analyze a specific line range:
```
mcp_xcf_analyzer filePath="/Users/toddbruss/Documents/GitHub/xcf/xcf/main.swift" startLine=10 endLine=50
```

#### Analysis Features

The Swift analyzer checks for various code quality issues:

- **Code Style**: Trailing whitespace, indentation, etc.
- **Cyclomatic Complexity**: Functions that are too complex
- **Unused Variables**: Declarations that are never used
- **Magic Numbers**: Hardcoded values that should be constants
- **Refactoring Opportunities**: Potential code improvements
- **Long Methods**: Functions exceeding the line threshold
- **Symbol Usage**: Unused symbols, declarations
- **Guard Usage**: Opportunities to use guard statements
- **And more...**: Multiple additional code quality checks

The analyzer output is formatted in Markdown by default, making it easy to read in AI assistants.

## Security Features

- Safely works with projects in your designated workspace
- Automatically prevents access outside your workspace boundaries
- Redirects to safe alternatives when needed
- Uses environment variables to define secure boundaries

## Workflow Examples

### Basic Workflow
1. `mcp_xcf_xcf action="use xcf"` - Activate the tool
2. `mcp_xcf_xcf action="grant"` - Grant necessary permissions
3. `mcp_xcf_xcf action="show"` - See available projects
4. `mcp_xcf_xcf action="open 1"` - Select a project 
5. `mcp_xcf_xcf action="build"` - Build the project
6. `mcp_xcf_xcf action="run"` - Run the project

### Code Exploration & Analysis
1. `mcp_xcf_xcf action="use xcf"` - Activate the tool
2. `mcp_xcf_xcf action="current"` - Check current project
3. `mcp_xcf_snippet filePath="/Users/toddbruss/Documents/GitHub/xcf/xcf/main.swift" entireFile=true` - Examine code
4. `mcp_xcf_analyzer filePath="/Users/toddbruss/Documents/GitHub/xcf/xcf/main.swift" entireFile=true` - Analyze code for issues
5. `mcp_xcf_xcf action="build"` - Test changes

## Troubleshooting

If commands fail, check:
- xcf installation is correct
- Configuration settings are valid
- Permissions are properly set
- Environment variables with `env`
- Try restarting your AI assistant

For persistent issues, examine terminal output for error messages.
